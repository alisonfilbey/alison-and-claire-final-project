---
title: "Untitled"
format: html
---

## SHINY APP CODE
```{python}
#load road, community area, and ped data
roads = pd.read_csv("Data/chicago_roads.csv")
comm_areas = pd.read_csv("Data/CommAreas.csv")
ped_crashes = pd.read_csv("Data/ped_crashes.csv")
```

```{python}
#create geometry column to turn roads csv into geopandas object
roads["geometry"] = roads["the_geom"].apply(wkt.loads)
roads_gdf = gpd.GeoDataFrame(roads, geometry="geometry")
roads_gdf = roads_gdf.set_crs("EPSG:4326", inplace=True)
```

```{python}
#create geometry column to turn ped crashes df geopandas object
ped_crashes["geometry"] = ped_crashes["LOCATION"].apply(wkt.loads)
ped_crashes_gdf = gpd.GeoDataFrame(ped_crashes, geometry="geometry")
ped_crashes_gdf = ped_crashes_gdf.set_crs("EPSG:4326", inplace=True)
```

```{python}
#create geometry column to turn community areas csv into geopandas object
comm_areas["geometry"] = comm_areas["the_geom"].apply(wkt.loads)
comm_areas_gdf = gpd.GeoDataFrame(comm_areas, geometry="geometry")
comm_areas_gdf = comm_areas_gdf.set_crs("EPSG:4326", inplace=True)
```

```{python}
#subset roads and crashes to hyde park with spatial join
roads_gdf = gpd.sjoin(roads_gdf, comm_areas_gdf, how="inner")
crashes_gdf = gpd.sjoin(ped_crashes_gdf, comm_areas_gdf, how="inner")
```

```{python}
#define buffer distance around each road so that crash points lie within buffer
buffer_distance = 0.00025

#create buffer around roads for spatial join
roads_gdf["buffer"] = roads_gdf.geometry.buffer(buffer_distance)

#create new geodataframe for buffers
buffered_gdf = roads_gdf.set_geometry("buffer")

#spatial join crashes with buffers to get street name where crash occured
buffered_gdf = buffered_gdf.drop(['index_right'], axis=1)
crashes_gdf = crashes_gdf.drop(['index_right'], axis=1)
crashes_gdf = gpd.sjoin(crashes_gdf, buffered_gdf, how="left", predicate="within")
crashes_gdf.to_csv('Data/crashes_gdf.csv', index=False)
```

```{python}
#group by street and calculate number of crashes
severe_crashes_by_road = crashes_gdf.groupby("STREET_NAM")[
    ["n_peds_total", "n_peds_severe"]].sum().reset_index()

#calculate share of severe ped crashes by speed
severe_crashes_by_road["share_severe"] = severe_crashes_by_road[
    "n_peds_severe"]/severe_crashes_by_road["n_peds_total"]
roads_gdf = pd.merge(roads_gdf, severe_crashes_by_road, on="STREET_NAM", how="left")

#reproject so that the data can plot with the basemap
comm_areas_gdf = comm_areas_gdf.to_crs(epsg=3857)
roads_gdf = roads_gdf.to_crs(epsg=3857)
```

```{python}
roads_gdf_buffer = roads_gdf
roads_gdf_geometry = roads_gdf
roads_gdf_buffer['geometry'] = roads_gdf_buffer['geometry'].apply(lambda geom: geom.wkt if geom is not None else None)
roads_gdf_geometry['buffer'] = roads_gdf_geometry['buffer'].apply(lambda geom: geom.wkt if geom is not None else None)

roads_gdf_geomtery.to_file("Data\_roads_gdf_geometry.shp")
roads_gdf_buffer.to_file("Data\_roads_gdf_buffer.shp")
comm_areas_gdf.to_file("Data\_comm_areas_gdf.shp")
```